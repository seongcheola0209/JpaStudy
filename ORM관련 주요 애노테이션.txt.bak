
TABLE 관련 애노테이션 
1. @Entity (name = "member")
- JPA에서 엔티티란 쉽게 생각하면, DB 테이블에 대응하는 하나의 클래스라고 생각할 수 있다
- @Entity가 붙은 클래스는 JPA가 관리해주며, JPA를 사용해서 DB 테이블과 매핑할 클래스는 @Entity를 
  꼭 붙여야만 매핑이 가능합니다.
- @Entity를 사용할 때는 접근 제어자가 public 혹은 protected 인 기본 생성자가 필수이다. 
- final 클래스, enum, interface, inner 클래스에는 사용이 불가능
- 저장하려는 속성은 final이면 안된다.
- "select account from member where account.age > 18" 의 쿼리 문장에서 member 가 @Entity로 
  정의된 클래스 이름이다. 
- 만약 name 속성을 지정하면 클래스명 대신 name 에 지정된 이름을 query 문에 사용한다. 

2. @Table(name="MEMBER", uniqueConstraints = {@UniqueConstraint(
          name = "NAME_AGE_UNIQUE",
          columnNames = {"NAME", "AGE"})})
- name : 매핑할 테이블 이름을 지정한다. (즉, 실제 데이터베이스에 생성되는 테이블 이름을 지정한다)  
- catalog : 데이터베이스의 catalog를 매핑한다.
- schema  : schema 기능이 잇는 데이터베이스에서 schema를 매핑한다. 
- uniqueConstraints (DDL) :   
- uniqueConstraints : DDL 생성 시에 유니크 제약조건을 만든다. 
  스키마 자동 생성 기능을 사용해서 DDL을 만들 때만 사용된다.
- indexes : 테이블의 인덱스를 지정한다. 

3. @UniqueConstraints = {name="unique 제약조건 이름, columnName = {"포함될 이름1", "포함될 이름2"}} 

4. @Id 
- Primary Key를 나타내기 위해 @Id 어노테이션을 사용하며, 생성 전략을 정의하기 위해 @GeneratedValue를 사용한다.  
- @Id 어노테이션은 기본타입, 기본 래퍼 유형, String, java.util.Date, java.sql.Date, java.math.BigDecimal, 
  java.math.BigInteger 중 하나여야한다.
  @Column 어노테이션을 지정하지 않으면 열 이름은 기본 키 속성 또는 필드의 이름으로 한다. 
- @GeneratedValue 없이 @Id 어노테이션만 사용한다면 직접 값을 해당 컬럼에 지정해야 한다. 
- 단일 키가 아닌 복합키를 지정할 수도 있다. 

5. @GeneratedValue(strategy=SEQUENCE, generator="CUST_SEQ") 
- strategy 에는 3가지 타입이 있다. 
 . GenerationType.AUTO : 시스템에서 해쉬값과 비슷한 값을 사용하여 생성한다. 가능하면 사용하지 않는 것이 좋다.   
 . GenerationType.IDENTITY : 기본키 생성을 데이터베이스에 위임한다. (JPA 또는 MySQL 사용시 추천) 
   persist()를 호출할 때 먼저 데이터베이스의 시퀀스를 사용해서 식별자를 조회한다.
   그리고 조회한 식별자를 엔티티에 할당한 후 해당 엔티티를 저장한 후 트랜잭션 커밋 시점에 flush가 발생하여 엔티티가 
   데이터베이스에 저장된다. 
 . GenerationType.SEQUENCE : 데이터베이스가 자동으로 기본키를 생성해준다. (PostgresSQL, H2 데이터베이스에서 사용가능) 
   @SequenceGenerator 에 지정된 이름을 사용하여 지정한다. 
   @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="USER_PK_GENERATOR")
   generator 에 지정된 이름은 @SequenceGenrator 의 name 필드에 지정된 이름이다. 
 . GenerationType.TABLE : 키를 생성하는 테이블을 사용하는 방법으로 Sequence와 유사하다.
   @TableGenerator 어노테이션의 정의가 필요하다. 즉 @TableGenerator 에 지정한 name 을 generator 에 지정한다. 

6. @SequenceGenerator
- @SequenceGenerator(name = "MEMBER_SEQ_TEST", sequenceName = "member_seq", initialValue = 1, allocationSize = 1)
 . name : 외부에서 참조하는 이름을 지정한다.
 . sequeneName : DB에 등록한 시퀀스 이름, 해당 시퀀스 이름으로 next val 조회
   (sequence 생성 명령어 : create sequence member_seq start with 1 increment by 50;)
   (다음 시퀀스 조회 : call next value for member_seq;)
 . initialValue : 시퀀스 DDL 생성시 초기 값을 지정 
 . allocationSize : 시퀀스 호출시에 증가하는 수 지정 
- DBMS 에서 제공하는 SEQUENCE 를 사용한다. 
- name : 외부에서 참조하기 위한 이름 지정 
- sequenceName : 데이터베이스에 등록되어 있는 시퀀스 이름 (기본값 : hibernate_sequence) 

7. @TableGenerator 
- @GeneratedValue 의 strategy 와 관련이 있다.
- Table 전략은 기본키를 사용할 수 있는 전용 테이블을 하나 생성하여 사용하는 전략이다. 
- @TableGenerator 애노테이션을 이용해 키 생성 테이블 명과 식별자 이름 등을 지정한다.
- @TableGenerator(name = "MEMBER_SEQ_TEST", table = "CUSTOM_SEQUENCE", pkColumnValue = "MEMBER_SEQ", allocationSize = 1)
 . name : 식별자 생성 이름. 외부에서 참조할 때 사용하는 이름이다. 
 . table : 키 생성을 위한 전용 테이블명 
 . pkColumnValue : 시퀀스 컬럼명 
 . valueColumnName : 시퀀스 값 컬럼명
 . initialValue : 초기값 
 . allocationSize : 한번 호출에 증가하는 수 

8. @Column
- @Column(name = "NAME", nullable = false, length = 10)
 . @Column 은 컬럼에 특별한 성격을 부여할 것이 없다면 생략 가능하다. 
 . name : 필드와 매핑할 테이블의 컬럼 이름을 지정한다. 여기에서 지정한 이름으로 테이블의 컬럼이 생성된다.
   다만, 프로그램에서 쿼리를 사용할 때는 여기 지정한 컬럼명이 아니라 클래스에 지정된 변수명을 사용한다.  
 . updateable : 엔티티 수정 시 이 필드도 같이 수정한다. false 옵션은 읽기 전용일때 사용된다. (디폴트 true)
 . nullable (DDL) : DDL 생성 시 null 값의 허용 여부를 설정한다. false로 설정하면 not null 제약조건이 붙는다. (디폴트 true) 
 . unique (DDL) : @Table의 uniqueConstraints와 같으나 한 컬럼에 간단히 유니크 제약조건을 걸 때 사용한다. (디폴트 false) 
 . length (DDL) : 문자 길이 제약조건, String 타입에만 사용한다. (디폴트 255)
 . precision, scale (DDL) : BigDecimal 타입(혹은 BigInteger)에서 사용 
   (precision 은 소수섬을 포함한 전체자리수, scale 은 소수의 자리수)  
 . columDefinition : DB 컬럼 정보를 직접 준다. (columnDefinition = "datetime(6) default now(6)") 

9. @ManyToOne 및 @OneToOne (연관관계매핑) 
- @JoinColumn(name = "컬럼명") 과 함께 사용한다. 
- @ManyToOne (한방향) 
  @JoinColumn(name = "user_id")
  private User user;                  # User 는 User Entity 를 의미한다. 

  User Entity 와 user_id 를 이용하여 ManyToOne 의 관련성을 갖는다. 

10. @JoinColumn(name = 컬럼명) 
- Entity 연관관계 또는 Element Collection을 연결하기 위한 Column을 지정한다.
- 컬럼명은 @Column 의 name 에 지정한 이름을 의미한다. 
- JoinColumn이 사용되는 용도는 주로, Entity의 연관관계에서 외래 키를 매핑하기 위해 사용된다.
  즉 주키와 주키가 아닌 다른 항목의 연관 관계를 설정할 때 주키가 아닌 항목에 JoinColumn 을 지정한다. 
- JoinColumn 이 없을 경우에는 @OneToOne, @ManyToOne 등 의 항목을 가지는 쪽이 주인이된다. 
  즉, @OneToOne, @ManyToOne 등 의 항목이 기술한 테이블에 Foreign key 항목을 정의한다.  
- @OneToOne : @JoinColumn 가 기술되어 있는 Entity가 연관관계의 주인, 즉 Foreign Key를 가진다.
- @ManyToOne : @JoinColumn 가 기술되어 있는 Entity가 연관관계의 주인, 즉 Foreign Key를 가진다.
- @OneToMany : @JoinColumn 가 기술된 Entity의 반대 Entity가 연관관계의 주인, 즉 Foreign Key를 가진다.
               별도로 One 에 해당하는 테이블이름과 Many 에 해당하는 테이블이름을 합친 이름(예 : account_study)
	       을 가지는 관계테이블을 생성하고 이를 통해 관계를 맺어 준다. 새로 생성된 테이블의 컬럼은 두 테이블의 키값을
	       항목으로 가진다. 
- @ManyToMany : @JoinColumn 가 기술된 Join Table(Entity)가 연관관계의 주인, 즉 FK를 가진다.

11. @Transient 
- 엔티티 객체와 테이블의 컬럼(column)이 서로 매핑되지 않는 클래스내의 변수를 지정하기 위해 사용한다.
  즉 @Transient "변수명" 으로 선언하면 해당 변수는 테이블과 매핑되지 않는 변수를 의미한다. 
- 아울러 getter/setter 메서드 이지만 엔티티 매핑과 관련이 없는 메서들 지정할 때도 사용한다. 
  만약 메서드에 지정하고 싶다면 이 메서드에 해당되는 변수가 존재하지 않거나 테이블과 매핑되지 않아야 한다. 
  
12. @Lob
- 이미지, 오디오 같은 데이터를 바이너리 형태로 저장하거나, 대량의 텍스트 값을 저장할 때 사용한다. 
- 엔티티 객체 필드위에 @LOB 을 지정하면 스프링이 자동으로 어떤 타입으로 저장할지 자동으로 판단한다. 
- 스프링에서는 아래와 같은 필드 타입에 따라 LOB 을 적용한다. 
 . CLOB = String, char[], java.sql.CLOB
 . BLOB = byte[], java.sql.BLOB 

13. @Transactional
- @Transactional을 클래스 단위 혹은 메서드 단위에 선언해준다.
- 클래스에 선언하게 되면, 해당 클래스에 속하는 메서드에 공통적으로 적용된다. (test(), test2() 메서드에 적용)
- 메서드에 선언하게 되면, 해당 메서드에만 적용된다. (test() 메소드에 적용)
- 트랜잭션은 Spring AOP를 통해 구현되어있다. 더 정확하게 말하면, 어노테이션 기반 AOP를 통해 구현되어있다. 
- 클래스, 메소드에 @Transactional이 선언되면 해당 클래스에 트랜잭션이 적용된 프록시 객체 생성
- 프록시 객체는 @Transactional이 포함된 메서드가 호출될 경우, 트랜잭션을 시작하고 Commit or Rollback을 수행
  CheckedException or 예외가 없을 때는 Commit 하고 UncheckedException이 발생하면 Rollback
- 주의사항 
 . @Transactional은 우선순위를 가지고 있다.
   클래스 메서드에 선언된 트랜잭션의 우선순위가 가장 높고, 인터페이스에 선언된 트랜잭션의 우선순위가 가장 낮다.
   인터페이스 보다는 클래스에 적용하는 것을 권고한다. 
 . 반드시 public 메서드에 적용되어야한다. Protected, Private Method에서는 선언되어도 에러가 발생하지는 않지만, 동작하지도 않는다. 
   Non-Public 메서드에 적용하고 싶으면 AspectJ Mode를 고려해야한다.

14. @Enumerated(EnumType.STRING)
- 자바 enum 타입을 엔티티 클래스의 속성으로 사용할 수 있다.
- @Enumerated 애노테이션에는 두 가지 EnumType이 존재한다.
 . EnumType.ORDINAL : enum 순서 값을 DB에 저장
 . EnumType.STRING : enum 이름을 DB에 저장

  enum Gender {
    MALE,
    FEMALE;
  }
  @Enumerated(EnumType.ORDINAL)
  private Gender gender;
  gender = MALE;             // DB 에 1이 저장된다.  

   
  @Enumerated(EnumType.STRING)
  private Gender gender;     // DB 에 "MALE" 이 저장된다.    


15. @Temporal(TemporalType.TIMESTAMP)
- @Temporal 어노테이션은 JPA에서 엔티티 클래스의 필드를 날짜(Date) 또는 시간(Time)으로 매핑할 때 사용된다. 
- 이 어노테이션은 필드의 데이터 유형과 데이터베이스 컬럼의 유형 간의 매핑을 지정하는 역할을 한다.
- 지정가능한 유형 
 . TemporalType.DATE: 필드를 날짜로 매핑한다. 시간 정보는 무시된다.
 . TemporalType.TIME: 필드를 시간으로 매핑한다. 날짜 정보는 무시된다.
 . TemporalType.TIMESTAMP: 필드를 날짜와 시간을 모두 포함하는 타임스탬프로 매핑한다.

16. @PersistenceContext 
- EntityManager를 빈으로 주입할 때 사용하는 어노테이션이다.
 . 스프링에서는 영속성 관리를 위해 EntityManager가 존재한다.
 . 그래서 스프링 컨테이너가 시작될 때 EntityManager를 만들어서 빈으로 등록해둔다.
 . 이 때 스프링이 만들어둔 EntityManager를 주입받을 때 사용한다. 
- @PersistenceContext로 지정된 프로퍼티에 아래 두 가지 중 한 가지로 EntityManager를 주입해준다.
 . EntityManagerFactory에서 새로운 EntityManager를 생성하거나
 . Transaction에 의해 기존에 생성된 EntityManager를 반환해준다.
- @PersistenceContext를 사용해야 하는 이유
 . EntityManager를 사용할 때 주의해야 할 점은 여러 쓰레드가 동시에 접근하면 동시성 문제가 발생하여 
   쓰레드 간에는 EntityManager를 공유해서는 안된다.
 . 일반적으로 스프링은 싱글톤 기반으로 동작하기에 빈은 모든 쓰레드가 공유한다.
   그러나 @PersistenceContext으로 EntityManager를 주입받아도 동시성 문제가 발생하지 않는다.
 . 동시성 문제가 발생하지 않는 이유는
   스프링 컨테이너가 초기화되면서 @PersistenceContext으로 주입받은 EntityManager를 Proxy로 감싼다.
   그리고 EntityManager 호출 시 마다 Proxy를 통해 EntityManager를 생성하여 Thread-Safe를 보장한다.

17. @Embeddable / @Embedded
 @Embeddable
 @Getter
 public class Address {
    private String city;
    private String street;
    private String zipcode;
    }
 }

 @Entity
 @Getter @Setter
 public class Member {
    @Id
    @GeneratedValue
    @Column(name = "member_id")
    private Long id;

    private String name;

    @Embedded
    private Address address;
}

- 도시, 주소 번지, 주소 우편번호는 회원의 '주소'를 알기 위해 가지는 컬럼들이다.
  이때 상세 데이터(도시, 주소 번지, 주소 우편번호) 또한 하나의 객체로 묶어
  보다 객체지향적으로 설계할 수 있다.
- 도시, 주소 번지, 주소 우편번호를 주소라는 객체로 묶어 표현하면 보다 객체지향적인 코드가 될 것이다.

18. 복합키를 주키로 설정 (@Embeddable 과 @EmbeddedId 를 이용하는 방법)

  @Data
  @Embeddable
  class EmpId implements Serializable {
      @Column(name = "EMP_NO")
      private int empNo;
      @Column(name = "EMP_NAME")
      private String empName;
  }

  @Data
  @Entity
  class Emp {
    @EmbeddedId
    private EmpId empId;    // 위에 @Embeddable 로 정의된 레코드를 Primary 키로 설정 
    private String phone;
  }

19. 복합키를 주키로 설정 (@IdClass 이용 방법)

  @Data
  class OrderProductPK implements Serializable {
      private int orderId;
      private int productId; 
  }

  @Data

  @Entity
  @IdClass(OrderProductPK.class)
  class OrderProduct {
      @Id
      @Column(name = "ORDER_ID")
      private int orderId;

      @Id
      @Column(name = "PRODUCT_ID")
      private int productId;

      private int amount;
   }

20. @Data
- @Data 어노테이션은  @Getter / @Setter, @ToString, @EqualsAndHashCode와 @RequiredArgsConstructor 를 
  합쳐놓은 종합 선물 세트라고 할 수 있다. 
- POJO(Plain Old Java Objects)와 bean과 관련된 모든 보일러플레이트(boilerplate =재사용 가능한 코드)를 생성한다. 
- class의 모든 필드에 대한 getter, setter, toString, equals와 같은 함수들 말이다.

21. @AttributeOverride / @AttributeOverrides

21. @EnableJpaRepositories

22. @RespositoryDefine 

23. @NoRepositoryBean 

24. @NotNullApi / @NotNull / @Nullable 

25. @EventListener 

26. @NamedQuery

27. @NamedNativeQuery

28. @Query

29. @Query(nativeQuery=true) 

30. @Modifying 

31. @CreatedDate 

32. @LastModifiedDate 

33. @LastModifiedBy 

34. @CreatedBy 


빈생성 
1. @ComponentScan 
- @Component, @Service, @Repository, @Controller, @Configuration 어노테이션이 붙은 
  클래스 Bean들을 찾아서 Context에 bean 등록을 해주는 어노테이션 

2. @Component(name="bean이름")
- 클래스에 선언하는 어노테이션이며 이 어노테이션을 선언해주는 것만으로도 해당 클래스를 스프링 빈(bean) 객체로 사용할 수 있다.
- @Component 어노테이션을 이용하면 Bean Configuration 파일에 Bean을 따로 등록하지 않아도 사용할 수 있다.
- Spring MVC역시 Spring context에서 동작하기 때문에 사용할 모든 클래스를 빈으로 등록해야 할 필요가 있다.
- @Service나 @Controller, @Repository, @Configuration과 같은 어노테이션에는 모두 @Component 어노테이션이 
  포함되어 있기 때문에 빈 등록이 된다. 
- 다만, 클래스가 사용되는 계층이 정해져있거나 혹은 설정 파일과 같이 특정한 용도가 있을 때 전부 @Component 어노테이션으로 
  사용해버리면 구분이 어렵기 때문에 이를 구분하여 사용한다. 
- 각 어노테이션에는 용도에 맞는 기능이 구현되어 있기 때문에 컨트롤러 클래스는 @Controller, 
  서비스 클래스는 @Service, 설정 관련 클래스에는 @Conguration과 같이 용도에 맞게 사용하는 것이 좋다.

3. @Controller / @RestController (@Controller 와 @RespondBody 가 합쳐진 애노테이션이다) 
- @Controller 는 @Component 와 @RequestMapping("") 이 합쳐진 애노테이션이다. 
- @Controller 역시 @Component 와 같은 기능을 가지고 있다. 하지만 @Controller에는 그 이외의 다른 동작을 포함하고 있다.
- @Controller 에는 경로를 매핑해주는 기능을 가지고 있다. 
  따라서 클래스내부의 메서드가 @RequestMapping("/test") 등을 가지고 있다면 @Component 대신 @Controller 를 사용해야 한다. 
- MVC 에서 Controll 클래스는 클라이언트와의 요청/응답을 주고 받는 역할을 한다. 이러한 역할을 수행하기 위해서는 최소 두가지 조건을
  만족해야 한다.
 . HttpServlet 의 기능을 수행해야 한다.
 . url(호출) → 클래스(서버) → 화면(응답)이 서로 연결되어야 한다. 

4. @Service
- @Service 어노테이션은 DDD(Domain-Driven Design: 도메인 주도 설계)에서 서비스 계층을 표현하는 클래스에 사용된다.
- @Service 어노테이션 자체에는 @Component와 구분되는 특수한 기능은 없지만, 클래스가 속한 계층과 용도를 명확하게 표현할 수 있다. 
- 그리고 AOP와 같은 기능을 사용해서 해당 어노테이션이 있는 클래스 단위로 특정 로직을 실행하게 할 수도 있다 

5. @Configuration 
- 내부에 @Component 를 포함하고 있다. 
- 주로 @Bean 메서드 형태를 내부에 가지고 있다.
 
   @Configuration
   public class ResourceConfig {

     @Bean
     public MangKyuResource mangKyuResource() {
         return new MangKyuResource();
     }
  }
- 다음과 같은 경우 주로 사용한다. 
 . 개발자가 직접 제어가 불가능한 라이브러리를 활용할 때
 . 다향성을 활용하여 여러 구현체를 등록해줘어야 할 때 
 . 유지보수성을 높이기 위해 애플리케이션 전범위적으로 공통으로 사용되는 클래스

6. @Repository 
- @Component, @Service 와 동일하다. 
- 명시적으로 구분해주기 위해 각자 사용목적에 따라 분리해서 사용한다. 

빈주입 
1. @Autowired / @Inject 
- 스프링 컨테이너에 등록된 빈을 사용하여 의존관계주입이 필요할 때, DI(의존성 주입)을 도와주는 어노테이션이다.
- 스프링 컨테이너에 빈들을 모두 등록한 후에, 의존성 주입 단계가 이루어진다. 
- 이 때 @Autowired 어노테이션이 부여된 메서드가 실행되며 필요한 인스턴스를 주입해준다.
- @Autowired는 총 3가지 방법으로 실현이 가능한데, 생성자, 수정자(setter), 필드를 사용할 수 있다.
- 생성자 주입 
 . 객체가 생성될 때 딱 한 번 호출되는 것이 보장된다. 의존관계가 변하지 않는 경우, 필수 의존관계에 사용된다.
 . 생성자가 하나일 경우 @Autowired를 생략할 수 있다.
- 빈을 주입할 때 타입을 우선으로 하여 빈을 주입하기 때문에 인터페이스를 상속받은 같은 타입의 빈이 여러개 존재할 
  경우 에러가 발생할 수 있기 때문에 @Primay 또는 @Qualifier 와 함께 사용해야 한다. 

  @Component
  public class OrderServiceImpl implements OrderService {
	private final MemberRepository memberRepository;
	private final DiscountPolicy discountPolicy;
	@Autowired
	public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
            this.memberRepository = memberRepository;
            this.discountPolicy = discountPolicy;
	}
  }

- 수정자 주입 
 . setter를 생성하고, 그 위에 @Autowired를 적는다.

  @Component
  public class OrderServiceImpl implements OrderService {
	private MemberRepository memberRepository;
	private DiscountPolicy discountPolicy;
	@Autowired
	public void setMemberRepository(MemberRepository memberRepository) {
	    this.memberRepository = memberRepository;
	}
	@Autowired
	public void setDiscountPolicy(DiscountPolicy discountPolicy) {
	    this.discountPolicy = discountPolicy;
	}
  }

- 필드주입 
 . 변수에 @Autowired를 붙여서 사용한다.
 . 하지만 단점이 너무 많다. 어플리케이션과 관련이 없는 테스트 코드에서만 한정적으로 사용하는 것이 좋다. 

 @Component
 public class OrderServiceImpl implements OrderService {
	@Autowired
	private MemberRepository memberRepository;
	@Autowired
	private DiscountPolicy discountPolicy;
 }


2. @Qualifier

- 빈의 의존성을 주입시 같은 타입의 빈을 구별하기 위해 코드에 @Qualifier를 사용한다.
- @Qualifier 어노테이션은 빈을 탐색할 때 같은 타입의 클래스를 @Autowised로 부터 구별할 수 있게 해준다.

  @Component
  public class SonyCamera implements Camera { // ①
	@Override
	public void shooting() {
		System.out.println("소니 카메라로 사진을 찍었습니다.");
	}
  }

  @Component
  public class CannonCamera implements Camera { // ①
	@Override
	public void shooting() {
		System.out.println("캐논 카메라로 사진을 찍었습니다.");
	}
  }

  @Component
  public class Travel {
	private final Camera camera;
	
	@Autowired     // ②
	public Travel(Camera camera) {
		this.camera = camera;
	}
	
	public void photography() {
		camera.shooting();
	}
  }
  
- 위의 프로그램은 camera 를 구현한 클래스가 2개이기 때문에 (① 참조) 아래 ②에서 @Autowired 시에 
  에러가 발생한다. 따라서 아래의 ② 부분을 아래와 같이 작성해 줘야 한다. 

  @Autowired 
  public Travel(@Qualifier("cannonCamera") Camera camera) {
		this.camera = camera;
  }

3. @Resource(name = "bean이름")
- 빈으로 등록된 객체를 등록해주는 기능은 @Autowired 와 동일하다.
- 다만, @Resource 어노테이션은 빈의 이름을 이용해서 주입할 객체를 검색한다. 
  즉 name 속성에 지정한 이름과 동일한 이름을 가지는 빈을 찾아서 주입해준다. 
- @Autowired 와의 차이점 
 . @Autowired애노테이션은 required 애노테이션을 사용해서 필수 여부를 지정할 수 있다는 점과 
   타입과 이름(디폴트는 타입)중 무엇을 먼저 사용하느냐에 대한 것을 지정해 줄 수 있다. 
 . 따라서 바로 위 @Qualifier() 에서 @Autowired 를 사용했을 때 에러가 발생한 것이다. 
- Resource의 동작 순서는 아래와 같이 동작한다.
 . name 속성에 지정된 빈 객체를 찾는다. name 속성이 없을 경우 동일한 타입을 갖는 빈 객체를 찾는다.
 . 이 때 동일한 타입을 갖는 빈 객체가 두 개 이상이면, 같은 이름을 가진 빈 객체를 찾는다.
 . 이 때 동일한 타입을 갖는 빈 객체가 두 개 이상이고, 같은 이름을 가진 빈 객체가 없는 경우 @Qualifier를 이용해서 주입할 빈 객체를 찾는다.


MVC 에서 사용하는 주요 애노테이션 

1. @RequestMapping / @PathVariable / @GetMapping / @PostMapping 
- 특정 url 요청을 수행할 메서드와 매핑을 지정하는 어노테이션이다.

- @RequestMapping 의 주요 속성 
 . value : URL 값으로 매핑 조건을 부여, 호스트주소와 포트를 제외한 주소 
   @RequestMapping(value="/hello")
   @RequestMapping({"/hello", "/hello-buddy", "/hello/**"})   // 다중연결도 지원한다. 
 . method : HTTP Request 메소드 값을 매핑 조건으로 부여
   사용 가능한 메소드는 GET, POST, HEAD, OPTIONS, PUT, DELETE, TRACE (7개)
   @RequestMapping(method = RequestMethod.GET, value = "/hello")
 . params : HTTP Request 파라미터를 매핑 조건으로 부여
 . consumes : 설정과 Content-Type request 헤더가 일치할 경우에만 URL이 호출됨
 . produces : 설정과 Accept request 헤더가 일치할 경우에만 URL이 호출됨

- @PathVariable 과 결합하여 사용 
 
  @GetMapping("mapping/{userId}")
  public String mappingPath(@PathVariable String userId) {
      log.info("mappingPath userId={}", userId);
      return "ok";
  }

- @GetMapping 또는 @PostMapping 과 함께 사용 
  
  @RestController
  @RequestMapping("/board")
  public class BoardController {
     private final BoardDAO boardDAO;

     @GetMapping("/check")
     public RespondEntity test() {
                   :
     }
  }

2. @PutMapping 
- 메소드에 주어진 URI 정보로 HTTP PUT 요청을 처리한다
- PUT 은 Create(생성) 에 매칭되는 POST와 다르게 Update(수정)에 매칭된다.

3. @RequestBody / @ResponseBody
- Spring에서는 @RequestBody, @ResponseBody 어노테이션을 명시함으로써 MessageConverter를 
  통한 데이터 변환 과정을 거치게 된다. 
- 예를 들어서 클라이언트에서 서버에 JSON 형식의 requestBody로 요청 데이터를 전송했을 때, 
  Java에서는 해당 JSON 형식의 데이터를 받기 위해서 JSON -> Java Object로의 변환이 필요하다.
- 마찬가지로 요청된 데이터를 처리 후, 서버에서 클라이언트로 다시 응답 데이터 responseBody를 보낼 때도 Java Object에서 
  JSON 또는 XML 같은 형식으로의 변환이 필요하다. 
- 이러한 과정을 어노테이션들을 처리해주는 애노테이션이다. 
- @RequestBody 어노테이션은 HttpRequest의 본문 requestBody의 내용을 자바 객체로 매핑하는 역할을 한다.
  해당하는 어노테이션이 붙어있는 메서드로 클라이언트의 요청이 들어왔을 때, DispatcherServlet에서는 먼저 해당 HttpRequest의 미디어 
  타입을 확인하고, 타입에 맞는 MessageConverter를 통해 요청 본문인 requestBody를 통째로 변환해서 메서드로 전달해주게 된다.
- @ResponseBody 어노테이션은 자바 객체를 HttpResponse의 본문 responseBody의 내용으로 매핑하는 역할을 한다.
  해당 어노테이션 마찬가지로 return Type에 맞는 MessageConverter를 통해 return 하는 객체를 해당 타입으로 변환해서 클라이언트로 전달한다.

4. @RequestParam
  @ResponseBody
  @RequestMapping("/request-param-v1")
  public String requestParamV2(
		@RequestParam("username") String memberName,
		@RequestParam("age") int memberAge) {
	log.info("username={}, age={}", memberName, memberAge);
	return "ok";
  }

 - 위와 같이 사용할 경우 사용자가 요청한 전문에서 해당 변수에 해당하는 값을 추출하여 대입해준다. 
 - String, int  와 같은 단순 타입일 경우에는 @RequestParam 을 생략해도 된다.
 - @RequestParam에 required 옵션을 주어 true일 경우는 필수, false일 경우는 필수가 아닌 것으로 설정 가능하다.
   false 일 경우 해당 변수값이 없을 경우 null 을 대입해준다. 
 - 요청 파라미터 값이 없는 경우 defaultValue를 설정할 수 있다. (이때 required 는 false 이어야 한다) 
 - Map 형태로 key, value 형태로 파라미터와 파라미터값을 추출할 수 있다. 

   @ResponseBody
   @RequestMapping("/request-param-map")
   public String requestParamMap(@RequestParam Map<String, Object> paramMap) {
 	log.info("username={}, age={}", paramMap.get("username"), paramMap.get("age"));
 	return "ok";
   }

5. @ModelAttribute

- @ModelAttribute는 메소드레벨, 메소드의 파라미터 두군데에 적용이 가능하다. 
- @ModelAttribute는 사용자가 요청시 전달하는 값을 오브젝트 형태로 매핑해주는 어노테이션이다.

  @Getter
  @Setter
  public class TestModel {
     private String name;
     private int age;
  }

  @RestController
  public class TestController {
    @GetMapping("/")
    public String getTestPage(@ModelAttribute TestModel testModel) {  // 사용자의 입력을 객체로 매핑해준다. 
        System.out.println("이름 : " + testModel.getName());
        System.out.println("나이 : " + testModel.getAge());
        return "test";
    }
 }

6. @ResponseStatus
- Spring 프레임워크에서 @ResponseStatus 은 컨트롤러 메서드의 HTTP 응답 상태 코드를 지정할 때 사용된다
  @Controller
  public class MyController {

      @GetMapping("/example")
      @ResponseStatus(HttpStatus.CREATED)
      public void handleRequest() {
        // 처리 로직
      }
  }
  
  위의 예제에서는 /example 요청에 대한 응답 상태 코드를 201(CREATED)로 지정한다.

  @RestController
  public class MyController {

    @GetMapping("/example")
    public void handleRequest() throws CustomException {
        throw new CustomException();
    }

    @ExceptionHandler(CustomException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public String handleCustomException(CustomException ex) {
        return "CustomException occurred";
    }
  }

  위의 예제는 CustomException이 발생했을 때 응답 상태 코드를 404(NOT_FOUND)로 지정한다.

7. @ExceptionHandler
- @ExceptionHandler는 Controller계층에서 발생하는 에러를 잡아서 메서드로 처리해주는 기능이다.
  (Service, Repository에서 발생하는 에러는 제외한다)

  @Controller
  public class SimpleController {

      // ...

      @ExceptionHandler({FileSystemException.class, RemoteException.class})
      public ResponseEntity<String> handle(Exception ex) {
            // ...
      }
  }

  위의 예제는 FileSystemException.class 또는 RemoteException.class 이 발생할 경우 
  실행될 메서드를 지정해 준다. 

8. @ControllerAdvice
- @ControllerAdvice는 @Controller와 handler에서 발생하는 에러들을 모두 잡아준다
- @ControllerAdvice안에서 @ExceptionHandler를 사용하여 에러를 잡을 수 있다.
  @ControllerAdvice
  public class ExceptionHandlers {
      @ExceptionHandler(FileNotFoundException.class)
      public ResponseEntity handleFileException() {
        return new ResponseEntity(HttpStatus.BAD_REQUEST);
      }
  }



AOP 관련 애노테이션 

1. @Aspect

2. @Before
3. @After 
4. @Around


기타 알아야할 빈등 

1. @RunWith(SpringRunner.class) → Junit5 부터는 @ExtendWith(SpringExtension.class)로 사용한다.  
- @SpringBootTest는 통합테스트로 이를 사용하면 모든 application context를 다 로딩한다.
  즉, 등록된 모든 빈을 모두 로딩해 버린다. 이는 아래와 같은 특징을 가진다. 
 . 실제 운영 환경에서 사용될 클래스들을 통합하여 테스트한다.
 . 단위 테스트와 같이 기능 검증을 위한 것이 아니라 spring framework에서 전체적인 플로우가 제대로 동작하는지 
   검증하기 위해 사용한다.
 . 애플리케이션의 설정, 모든 Bean을 모두 로드하기 때문에 운영환경과 가장 유사한 테스트가 가능
 . 전체적인 Flow를 쉽게 테스트
 . 이 때문에 시간이 오래걸리고 디버깅이 어려운 단점이 있다.
 . 단위테스트에는 알맞지 않다.
- @RunWith(SpringRunner.class)를 사용한다면 @Autowire, @MockBean에 해당되는 것들만 
  application context를 로딩한다. 

2. @DataJpaTest
- JPA 컴포넌트들만을 테스트하기 위한 어노테이션
- full-auto config를 해제하고 JPA 테스트와 연관된 config만 적용
- JPA 테스트를 위한 손쉬운 환경을 만들어준다.
- @DataJpaTest는 다른 컴포넌트들은 로드하지 않고 @Entity를 읽어 Repository 내용을 테스트할 수 있는 환경을 만들어준다.
- @Transactional을 포함하고 있어서 테스트가 완료되면 따로 롤백을 할 필요가 없다.
- JPA Repo 단위 테스트가 필요하다면 @DataJpaTest를 이용하는 것이 효과적이다.
- @AutoConfigureTestDatabase(replace = Replace.NONE) 어노테이션의 속성을 추가하면 실 데이터베이스에 테스트도 가능하다.
- 디폴트는 @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace) -> in-memory DB활용
- 사용하기 위해선 RunWith나 ExtendWith와 함께 사용해야한다.

3. @Test


4. @Getter / @Setter 
- 사용자가 일일이 getter 와 setter 를 정의할 필요가 없다.
  public class TestVO {
    
     @Getter @Setter
     private String name;
     private String tel;
  }

  위와 같이 하면 해당 변수에 해당하는 getter 와 setter 를 생성한다.

  @Getter
  @Setter
  public class TestVO { 
      private String name;
      private String tel;
  }

  위와 같이 하면 클래스 내부의 모든 변수에 대해 getter 와 setter 메서드를 생성해 준다. 

5. @Value
- 프로젝트를 진행하다보면 시크릿 키와 같이 외부에 노출해서는 안되는 값들을 사용할 때가 있다.
- 만약 코드 내부에 시크릿 키를 저장하고 사용할 경우 깃 허브에 올리면 외부에 노출되게 된다.
- @Value를 단순하게 "application.properties에서 값을 꺼내온다.  

  application.properties 에 저장된 내용 
  jwt.secretKey=secretKey
  jwt.expiredMs=600000
  
  @Value("${jwt.secretKey}")
  private String secretKey;
  @Value("${jwt.expiredMs}")
  private Long expiredMs;


6. @PostConstruct 

7. @PreDestroy



스프링의 라이프사이클 클래스

CommandLineRunner와 ApplicationRunner
@Order 

https://curiousjinan.tistory.com/entry/spring-boot-constructor-injection-part1-componentscan-analysis
https://dev-coco.tistory.com/170
https://positive-impactor.tistory.com/220
https://aonee.tistory.com/45
https://dev-coco.tistory.com/173